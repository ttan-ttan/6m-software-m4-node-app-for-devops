version: 2.1

orbs:
  node: circleci/node@5.0.1
  docker: circleci/docker@2.7.2
  # heroku: circleci/heroku@2.0
  snyk: snyk/snyk@1.5.0

jobs:
  build:
    docker:
      - image: cimg/node:16.10
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run: |
          echo "Installing dependencies..."
          npm install
  test:
    docker:
      - image: cimg/node:16.10
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run: |
          echo "Running tests..."
          npm run test
  build-and-push:
    docker:
      - image: cimg/node:16.10
    steps:
      - setup_remote_docker
      - checkout
      # - run:
      #     name: Docker Login
      #     command: |
      #       echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      - run:
          name: Docker Login
          command: |
            echo "$DOCKER_PASSWORD" > password.txt
            docker login -u "$DOCKER_USERNAME" --password-stdin < password.txt
      - docker/build:
          image: ttanttanyj/6m-software-m4-node-app-for-devops
      - docker/push:
          image: ttanttanyj/6m-software-m4-node-app-for-devops
  # deploy:
  #   executor: heroku/default
  #   steps:
  #   - setup_remote_docker      
  #   - heroku/install
  #   - checkout
  #   - run:
  #       name: Heroku Container Push
  #       command: | 
  #           heroku container:login
  #           heroku stack:set container -a ttanttanyj-su-devops
  #           heroku container:push web -a ttanttanyj-su-devops
  #           heroku container:release web -a ttanttanyj-su-devops
  scan:
    docker:
      - image: cimg/node:16.10
    environment:
      IMAGE_NAME: ttanttanyj/6m-software-m4-node-app-for-devops
    steps:
      - checkout
      - setup_remote_docker
      - docker/check
      - run: docker build -t $IMAGE_NAME .
      - snyk/scan:
          docker-image-name: $IMAGE_NAME
  codescan:
    docker:
      - image: cimg/node:16.10
    environment:
      IMAGE_NAME: ttanttanyj/6m-software-m4-node-app-for-devops
    steps:
      - checkout
      - setup_remote_docker
      - docker/check
      - run: docker build -t $IMAGE_NAME .
      - snyk/install
      - run: |
          snyk code test

#for project that use semantic versioning
workflows:
  simple_workflow:
    jobs:
      - build:
          filters:
            branches:
              only: main
      - test:
          requires:
            - build 
          filters:
            branches:
              only: main
      - build-and-push:  
          filters:
            tags:
              only: /^v.*/  # triggered only when a tag following the pattern v* (e.g., v1.0.0) is pushed
            branches: 
              ignore: /.*/  # ignore any branch updates -this job would not run if got any branch update, except got the versioning tag above
      - scan:
            requires:
              - build
            filters:
              branches:
                only: main
      - codescan:
            requires:
              - build
            filters:
              branches:
                only: main
     
      
      # - deploy:
      #     requires:
      #       - build-and-push
      #     filters:
      #       tags:
      #         only: /^v.*/
      #       branches: 
      #         ignore: /.*/

# branch-based method - for simplier project that is branch-centric
# workflows:
#   simple_workflow:
#     jobs:
#       # Run build and test on main branch
#       - build:
#           name: build-main  # Explicit name for main branch to avoid conflict
#           filters:
#             branches:
#               only: main
#       - test:
#           name: test-main  # Explicit name for test on main to avoid conflict
#           requires:
#             - build-main  # Use the explicit name here
#           filters:
#             branches:
#               only: main

#       # Run all jobs (build, test, publish, deploy) on release branch
#       - build:
#           name: build-release  # Explicit name for release branch to avoid conflict
#           filters:
#             branches:
#               only: release
#       - test:
#           name: test-release  # Explicit name for test on release to avoid conflict
#           requires:
#             - build-release
#           filters:
#             branches:
#               only: release
#       - publish:
#           requires:
#             - test-release
#           filters:
#             branches:
#               only: release
#       - deploy:
#           requires:
#             - publish
#           filters:
#             branches:
#               only: release